{"version":3,"sources":["components/Sheet/sheet.tsx","components/Book/book.tsx","components/Navbar/navbar.tsx","components/score/score.tsx","components/out/out.tsx","components/EnterCode/enterCode.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sheet","props","_sheetPos","_sheetCoverStr","_timerStopBool","_stopTimerLoop","pos","handleEndDrag","bind","handleStartDrag","sheetCover","document","querySelector","this","style","backgroundColor","boxShadow","rotVal","xOry","startPos","Number","slice","relativeDist","window","innerWidth","e","socket","customPlayerCodeStr","dragButtonPosMultiplier","console","log","originX","currentYRot","convertRoataionToNumber","transform","actualWindowWidth","screenX","touches","clientX","screenLeft","newYRot","translationToRotation","shouldPageNumberDisplay","sheetAngleOffset","toString","emit","bookAngle","customCode","sheetPos","resetStopTimerLoop","resetsheet","setTimeout","classList","toggle","sheetNumber","className","pageNumber","shouldNextPageNumberDisplay","React","Component","Book","_startTime","Date","_endTime","_sheetArray","_timeDiff","_pageNumber","shouldBeDragabble","forEach","sheet","handleDrag","customPlayerCode","shouldTimerBeStopped","timeDIff","getTime","rand","Math","random","floor","forceUpdate","resetTimerStopBool","currentSheet","playerCode","resetTimeDiffBool","appCallBack","playerTurn","push","_sheetCollection","key","draggable","onDragStart","onTouchStart","onTouchMove","onTouchEnd","onDrag","onDragEnd","Navbar","socialMediaLinks","sessionHeading","href","target","id","onClick","handleSocialMediaClick","textDecoration","Score","playerScore","opponentScore","Out","playerText","finalScore","toggleOutWindow","EnterCode","getCode","customCodeText","hideComponent","parentCallBack","value","type","name","App","_totalScore","_isOut","socketIo","_customPlayerCode","_displayPlayererSessionInfo","state","bookCallBack","resetTotalScore","sendPlayerScore","codeCallBack","getCustomPlayerCode","sendPlayerPageNumber","currentSheetPageNumber","sendOutMessage","currScore","score","currentPage","page","code","on","oppScore","setState","playerInitInfoMap","initSession","sheetInfo","sheetCoverPos","sheetAngle","opponentPageNumber","innerText","parentCallback","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a46c250.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./sheet.scss\";\n\ninterface CustomInputProps {\n    pos: number;\n    pageNumber: number;\n    key: string\n  }\n\n\nclass Sheet extends React.Component <CustomInputProps> {\n\n    _sheetPos: number = 0;\n    _sheetCoverStr : string;\n    // Used to indicate if the timer in book should be stopped\n    _timerStopBool: boolean = false;\n    // Used to handle loop from the book\n    // If the loop in book has already gone through this sheet in the previous iteration\n    // ewhere rot was greater than 75deg then don't allow that\n    _stopTimerLoop: boolean = false;\n\n    // constructor \n    constructor(props : any) {\n        super(props);\n        this._sheetPos = props.pos;\n        this._sheetCoverStr = \"sheet-cover\" + this._sheetPos;\n        // Bind functions\n        this.handleEndDrag = this.handleEndDrag.bind(this);\n        this.handleStartDrag = this.handleStartDrag.bind(this);\n    }\n\n\n    // add component did mount and change the background color based on the position\n    // Also add a box shadow\n\n    componentDidMount() {\n        const sheetCover = document.querySelector(\".\"+this._sheetCoverStr)  as HTMLElement;\n        if (this._sheetPos == 0 || this._sheetPos == 9) {sheetCover.style.backgroundColor = \"#50C878\";}\n        else {sheetCover.style.backgroundColor = \"white\";}\n        sheetCover.style.boxShadow = \"2px 3px 4px 0.05px\";\n    }\n\n\n    // Convert rotation to number\n    // A string like rotateY(50deg) to 50\n    // xOry indicates if the string is either in the form of rotateX() or rotateY()\n    convertRoataionToNumber(rotVal: string, xOry: boolean = true) {\n        const startPos = (xOry) ? 8 : 7;\n        return Number(rotVal.slice(startPos, -4));\n    }\n\n\n    // handle start drag\n    // Set start time\n    handleStartDrag() {\n    }\n\n\n    // covert transklation to rotation\n    translationToRotation(relativeDist: number) {\n        // the angle the sheets should turn is based on the sheetPos\n        // This is done so that the sheets move at a different rate,\n        // which looks better\n        // maxDivisor is lower for mobile screens since\n        // there will be lesser distance to travel to skip the book\n        // Full rotatioin should happen for a smaller relative distance\n        const maxDivisor = (window.innerWidth <= 1200) ? 5 : 6;\n        return relativeDist/(maxDivisor - this._sheetPos*0.15);\n    }\n\n\n    // handle drag\n    // Translate the sheet based on relative mouse position\n    // Returns true if time considered for page number\n    // calculation should be stopped \n    handleDrag(e: any, socket: any, customPlayerCodeStr: () => string) {\n        // x position of the bottom right corner of the sheet\n        const dragButtonPosMultiplier = (window.innerWidth < 1200) ? 0.7 : 0.55;\n        console.log(dragButtonPosMultiplier);\n        const originX = window.innerWidth*dragButtonPosMultiplier;\n        const sheetCover = document.querySelector(\".\"+this._sheetCoverStr) as HTMLElement;\n        const currentYRot = this.convertRoataionToNumber(sheetCover.style.transform, true);\n        // get the actual width of the window\n        // e.screenX returns the positon of the mouse wrt the whole screen\n        const eScreen  = (e.screenX) ? e.screenX : (e.touches) ? e.touches[0].clientX : 0;\n        const actualWindowWidth = eScreen - window.screenLeft;\n        //  Below formula emulates a good fit for drag movement to sheet angle\n        const newYRot = this.translationToRotation(actualWindowWidth - originX);\n        // new angle is being restricted to -155deg, this offers good tradeoff between,\n        // dragging distance and duration\n        if (currentYRot >= newYRot) {\n            // Comsidering one of the sheet which opens last\n            // Use this to display the page number\n            if (this.shouldPageNumberDisplay() && newYRot <= -70 && !this._stopTimerLoop) {\n                // stop the timer after a certain angle\n                // Dont set the timer bool always, only if it is false, i.e..., only onceas\n                if (!this._timerStopBool) {\n                    // stop timer\n                    this._timerStopBool = true;\n                    // stop loop\n                    this._stopTimerLoop = true;\n                }\n            }\n            if (newYRot >= -145 + this.sheetAngleOffset()) {\n                sheetCover.style[\"transform\"] = \"rotateY(\" + newYRot.toString() + \"deg\" +\")\";\n                // send this info to server so that\n                // opponent can have the same animation while watching\n                socket.emit(\"bookOpenAngle\", {bookAngle: newYRot, customCode: customPlayerCodeStr(), sheetPos: this._sheetCoverStr});\n            }\n        }\n        return false;\n        \n    }\n\n\n    // should page number be displayed\n    // Only the last page which turns over should display the page number\n    shouldPageNumberDisplay() {\n        return this._sheetPos == 5;\n    }\n\n\n    shouldNextPageNumberDisplay() {\n        return this._sheetPos == 4;\n    }\n\n\n    // reset timer stop bool\n    // its necessary to reset this, or else\n    // the time difference will be considered each time handleDrag is called\n    resetTimerStopBool() {\n        this._timerStopBool = false;\n    }\n\n\n    // should timer be stopped\n    // HandleDrag in book uses this to stop the timer\n    shouldTimerBeStopped() {\n        return this._timerStopBool; \n    }\n\n\n    // reset stop timer loop\n    // this needs to be done inorder to get the new timeDiff value in book\n    resetStopTimerLoop() {\n        this._stopTimerLoop = false\n    }\n\n\n    // sheet offset angle\n    // Give an offset to every sheet\n    // THe sheets should be clustered around the beginning and the end for better visibility of score\n    sheetAngleOffset() {\n        return (this._sheetPos >= 5) ? (9 - this._sheetPos)*5 : (145 - this._sheetPos*10) \n    }\n\n\n    // Handle End drag\n    // Set end time and reset sheet\n    handleEndDrag() {\n        this.resetStopTimerLoop();\n        this.resetsheet();\n    }\n\n\n    // resetsheet\n    // Reset the sheet back to its original state with a 2s animation\n    resetsheet() {\n        const sheetCover = document.querySelector(\".\"+this._sheetCoverStr) as HTMLElement;\n        // Hold the page open for 1.5s to view the score\n        setTimeout(() => {\n            sheetCover.classList.toggle(\"sheet-cover-close\"); // Starts the closing sheet animation\n            // Wait for the sheet to close, then reset them toggle back the animation class\n            setTimeout(() => {\n                sheetCover.style[\"transform\"] = \"rotateY(0deg)\";\n                sheetCover.classList.toggle(\"sheet-cover-close\"); \n            }, 1900);\n        }, 1500);\n    }\n\n    // render\n    render() {\n        // Display pageNumber if page is 4\n        // Display next page number if page is 4\n        // Dont display anything else\n        const sheetNumber = (this.shouldPageNumberDisplay()) ? <p className=\"page-number\">{this.props.pageNumber}</p> : (this.shouldNextPageNumberDisplay()) ? <p className=\"next-page-number\">{this.props.pageNumber+1}</p> : null;\n        \n        return (\n        <div className={this._sheetCoverStr}>{sheetNumber}</div> \n        );\n    }\n}\n\nexport default Sheet;\n\n\n\n","import React from \"react\";\nimport Sheet from \"../Sheet/sheet\";\nimport \"./book.css\";\nimport App from \"../../App\";\n\ninterface customBookProps {\n    appCallBack: (currentSheetScore: number) => void;\n    socket: any;\n    customPlayerCode: () => string;\n    playerTurn: boolean\n}\n\n\nclass Book extends React.Component<customBookProps> {\n\n    // get the start time for calculating score\n    _startTime: Date = new Date();\n    // get the end time for calculating score\n    _endTime: Date = new Date();\n    // Hold all the sheet instances to manipulate sheet elements\n    _sheetArray: Sheet[] = [];\n    // Time diff translates into score\n    _timeDiff: number = 0;\n    // Score after each book turn\n    _pageNumber: number = 0;\n\n\n    // constructor\n    constructor(props: any) {\n        super(props);\n        // Bind functions\n        this.handleEndDrag = this.handleEndDrag.bind(this);\n        this.handleStartDrag = this.handleStartDrag.bind(this);\n    }  \n\n\n    // handle start drag\n    handleStartDrag() {\n        // adding shouldBeDragabble here insted of dragabble atribute to handle touch evvents aswell\n        if (this.shouldBeDragabble()) {\n            // start time checkpoint\n            this._startTime = new Date();\n        }\n    }\n\n\n    // handle drag\n    handleDrag(e: any) {\n        // adding shouldBeDragabble here insted of dragabble atribute to handle touch evvents aswell\n        console.log(this.shouldBeDragabble());\n        if (this.shouldBeDragabble()) {\n            // delegate start drag to each component\n            this._sheetArray.forEach(sheet => {\n                sheet.handleDrag(e, this.props.socket, this.props.customPlayerCode);\n                // timer stop\n                if (this.shouldTimerBeStopped(sheet)) {\n                    // end time checkpoint\n                    this._endTime = new Date();\n                    const timeDIff: number = this._endTime.getTime() - this._startTime.getTime();\n                    this._timeDiff = timeDIff;\n                    // If the number is odd.convert it to even\n                    // This is done to increase the probability of 0 occuring\n                    if (this._timeDiff % 2 != 0) {\n                        const rand = Math.random()*3;\n                        const roundedRand = Math.floor(rand);\n                        if (roundedRand == 0) {\n                            this._timeDiff += 1;\n                        }\n                    }\n                    // take only the last digit of time diff\n                    // that's how book cricket scores are calculated\n                    this._pageNumber = Number(this._timeDiff.toString());\n                    // force rerender of the component to upodate the page values on each sheet\n                    this.forceUpdate();\n                    // reset timer stop bool so that the above calculatio is done only once\n                    sheet.resetTimerStopBool();\n                }\n            });\n        }\n    }\n\n\n    // should timer be stopped\n    shouldTimerBeStopped(currentSheet: Sheet) {\n        // We have to delegate part of the responisibility to the sheet\n        // We need to calculate the time diff only once,\n        // Hence check if _timeDIff has its original value, only then\n        // Calculate the time diff\n        return (currentSheet.shouldTimerBeStopped() && this._timeDiff == 0);\n    }\n\n\n    // reset time diff bool\n    // resetting is important to update time on opening the book again\n    resetTimeDiffBool() {\n        this._timeDiff = 0;\n    }\n\n\n    // handle end drag\n    handleEndDrag() {\n        // adding shouldBeDragabble here insted of dragabble atribute to handle touch evvents aswell\n        if (this.shouldBeDragabble()) {\n            // first convey stop animmaton to opponent\n            // then stop current player's animation\n            this.props.socket.emit(\"opponentBookStopOpeningAnimation\", {playerCode: this.props.customPlayerCode()});\n            // delegate end drag to each component\n            this._sheetArray.forEach(sheet => {\n                sheet.handleEndDrag();\n            });\n            this.resetTimeDiffBool();\n            // Set totalScore in app using callback\n            if (this.props.appCallBack) this.props.appCallBack(this._pageNumber);\n        }\n    }\n\n    // should be dragabble\n    shouldBeDragabble(): boolean {\n        return this.props.playerTurn;\n    }\n\n\n    // component did mount\n    componentDidMount() {\n        // Add sheet instances to manipulate later\n        for (let sheetPos: number = 0; sheetPos < 10; sheetPos++) {\n            this._sheetArray.push(new Sheet({pos:sheetPos}));\n        }\n    }\n\n\n    // render\n    render() {\n        // Append all the sheets necessary\n        let _sheetCollection: any[] = []\n        for (let sheetPos: number = 0; sheetPos < 10; sheetPos++) {\n           _sheetCollection.push(<Sheet pos={sheetPos}  key={\"sheet\"+sheetPos.toString()} pageNumber={this._timeDiff}/>);\n        }\n        return (\n            <div className=\"complete-book\">\n                {/* Invisible button */}\n                {/* When dragged translates distance into sheet opening angle*/}\n                <button className=\"drag-button\" draggable={true} onDragStart={this.handleStartDrag} onTouchStart={this.handleStartDrag} onTouchMove={this.handleDrag.bind(this)} onTouchEnd={this.handleEndDrag} onDrag={this.handleDrag.bind(this)} onDragEnd={this.handleEndDrag}>DragMe</button>\n                <div className=\"book\">\n                    {_sheetCollection}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Book;","import React from \"react\";\nimport \"./navbar.css\";\n\n\nclass Navbar extends React.Component<{ parentCallback: (message: string) => void, sessionHeading: string}, {}> {\n    constructor(props: any) {\n        super(props);\n    }\n\n    // drop down menu toggle\n    handleSocialMediaClick() {\n        let socialMediaLinks = document.querySelector(\".Social-Media-selection\");\n        socialMediaLinks?.classList.toggle(\"Social-Media-selection-active\");\n    }\n\n    render() {\n        return (\n            <nav>\n                <div className=\"navbar-main\">\n                    <p className=\"session-heading\">{this.props.sessionHeading}</p>\n                    <div className=\"Social-Media-selection\">\n                        <ul className=\"Social-Media-dropdown\">\n                            <li className=\"Social-Media-dd-item\"><a href=\"https://www.instagram.com/sri._vatsa/\" target=\"_blank\" id=\"social-media-element\" onClick={this.handleSocialMediaClick}>Instagram</a></li>\n                            <li className=\"Social-Media-dd-item\"><a href=\"https://twitter.com/SrivatsaM11\" target=\"_blank\" style={{textDecoration: \"none\"}} id=\"social-media-element\" onClick={this.handleSocialMediaClick}>Twitter</a></li>\n                        </ul>\n                    </div>\n                    <ul className=\"nav-links\">\n                        <li className=\"Social-Media\" onClick={this.handleSocialMediaClick}>Social Media</li>\n                    </ul>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./score.css\";\n\ninterface scoreCustomProps {\n    playerScore: number;\n    opponentScore: string\n}\n\nclass Score extends React.Component<scoreCustomProps> {\n\n    // constructor\n    constructor(props: any) {\n        super(props);\n    }\n\n    // render\n    render() {\n        return (\n            <div className=\"scoring-div\">\n                <div className=\"total-div\">\n                    <p className=\"scoring-key\">Total :</p>\n                    <p className=\"scoring-val\">{this.props.playerScore}</p>\n                </div>\n                <div className=\"total-div\">\n                    <p className=\"scoring-key\">Opponent :</p>\n                    <p className=\"scoring-val\">{this.props.opponentScore}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Score;","import React from \"react\";\nimport \"./out.scss\";\n\ninterface customOutInterface {\n    finalScore: number;\n    playerText: string\n}\n\nclass Out extends React.Component<customOutInterface> {\n\n    // constructor\n    constructor(props: any) {\n        super(props);\n    }\n\n\n    // toggle out window on and off\n    toggleOutWindow() {\n        const outElement = document.querySelector(\".out-div\") as HTMLElement;\n        outElement.classList.toggle(\"remove-out-div\");\n    }\n\n    // render\n    render() {\n        return (\n            <div className=\"out-div remove-out-div\">\n                <div className=\"display-out\">\n                    <p className=\"out-text\">{this.props.playerText}</p>\n                    <p className=\"score-text\">{this.props.finalScore}</p>\n                    <button className=\"exit-button\" onClick={this.toggleOutWindow}>Exit</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Out;","import React from \"react\";\nimport \"../out/out.scss\";\nimport \"./enterCode.scss\";\n\ninterface customenterCodeInterface {\n    parentCallBack: (message: string) => void\n}\n\nclass EnterCode extends React.Component<customenterCodeInterface> {\n\n    \n    constructor(props: any) {\n        super(props);\n        this.getCode = this.getCode.bind(this);\n    }\n\n    \n    // get code\n    getCode() {\n        const customCodeText = document.querySelector(\".code-text-input\") as HTMLInputElement;\n        this.hideComponent();\n        // delegate socke.io code handling to parent\n        this.props.parentCallBack(customCodeText.value);\n    }\n\n\n    // hide component\n    // since this should be visible only before the game starts\n    hideComponent() {\n        const enterCodeElement = document.querySelector(\".enterCode-div\") as HTMLElement;\n        enterCodeElement.classList.toggle(\"remove-enterCode-div\");\n    }\n\n    // render\n    render() {\n        return (\n            <div className=\"enterCode-div\">\n                <div className=\"display-enterCode\">\n                    <p className=\"enterCode-text\">Enter custom code</p>\n                    <input type=\"text\" name=\"code-text\" className=\"code-text-input\"/>\n                    <button className=\"Enter-game-button\" onClick={this.getCode}>Enter Game</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default EnterCode;","import React, { Component } from 'react';\nimport './App.css';\nimport Book from \"./components/Book/book\";\nimport Navbar from \"./components/Navbar/navbar\";\nimport Score from \"./components/score/score\";\nimport Out from \"./components/out/out\";\nimport Sheet from \"./components/Sheet/sheet\";\nimport EnterCode from \"./components/EnterCode/enterCode\";\nimport socketIo from \"socket.io-client\";\n\nclass App extends React.Component<{}, {opponentScore: string}> {\n\n  _totalScore: number = 0;\n  _isOut: boolean = false;\n  // http://localhost:3000/\n  // https://blooming-meadow-53073.herokuapp.com/\n  socket = socketIo(\"https://blooming-meadow-53073.herokuapp.com/\");\n  _customPlayerCode: string = \"\";\n  _displayPlayererSessionInfo: boolean = false;\n\n  // Test autobuild V2\n  // Ignore this\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      opponentScore: \"0\",\n    }\n    \n    // binding functions\n    this.bookCallBack = this.bookCallBack.bind(this);\n    this.resetTotalScore = this.resetTotalScore.bind(this);\n    this.sendPlayerScore = this.sendPlayerScore.bind(this);\n    this.codeCallBack = this.codeCallBack.bind(this);\n    this.getCustomPlayerCode = this.getCustomPlayerCode.bind(this);\n    this.sendPlayerPageNumber = this.sendPlayerPageNumber.bind(this);\n  }\n\n  // toggle out window\n  toggleOutWindow() {\n    const outComponent = new Out({});\n    outComponent.toggleOutWindow();\n  }\n\n\n  // Handkle book call back\n  // Sccore is updated here everytime drag is ended\n  bookCallBack(currentSheetPageNumber: number) {\n    // send the current page number to opponent\n    this.sendPlayerPageNumber(currentSheetPageNumber);\n    // If page number is a multiple of 10, then the palyer is out\n    if (currentSheetPageNumber % 10 == 0) {\n      setTimeout(() => {\n        this._isOut = true;\n        this.sendOutMessage();\n        this.toggleOutWindow();\n        this.forceUpdate();\n        // dont reset score before toggling window\n        // it'll update the reset value to score\n      }, 1800);\n    } else {\n      this._totalScore += Number(currentSheetPageNumber.toString().slice(-1));\n      // Total time for book opoen position hold and close aniation is 1.9s + 1.5s = 3.4s\n      // Timeout for 2.5s so that we give enough time for the book\n      // to close partially, so that page number wont be visible when\n      // we reset it\n      setTimeout(()=>{\n        this.forceUpdate();\n      }, 2500);\n    }\n    // send player score to opponent after each turn \n    // should always send this after updating total score\n    this.sendPlayerScore(this._totalScore);\n  }\n\n  // get custom pleayer code\n  // used to return updated customPlayerCode in sheet\n  getCustomPlayerCode() {\n    return this._customPlayerCode;\n  }\n\n\n  // reset total score\n  resetTotalScore() {\n    this._totalScore = 0;\n    // reset the value of player score element\n    // const scoringELement = document.querySelector(\".scoring-val\") as HTMLElement;\n    // scoringELement.innerText = \"0\";\n  }\n\n\n  // send player score\n  sendPlayerScore(currScore: number) {\n    this.socket.emit(\"playerScore\", {score: currScore.toString(), customCode: this._customPlayerCode});\n  }\n\n\n  // send player page number\n  sendPlayerPageNumber(currentPage:  number) {\n    this.socket.emit(\"currentPage\", {page: currentPage.toString(), playerCode: this._customPlayerCode});\n  }\n\n\n  // send out message to opponent\n  sendOutMessage() {\n    this.socket.emit(\"outMessage\", {playerCode: this._customPlayerCode});\n  }\n\n\n  // code call back\n  // handles sending game initial code to server\n  codeCallBack(code: string) {\n    this.socket.emit(\"customCommonCode\", code);\n  }\n\n  // final score to be displayed\n  // decide between total score or opponent score\n  // IF this player is not out, hta tmeans the opponent just got out\n  // HEnce show opponent score\n  finalScore() {\n    return (this._isOut) ? this._totalScore : Number(this.state.opponentScore);\n  }\n  \n\n  // Text to be displayed on out dialog box\n  playerText() {\n    return (this._isOut) ? \"You are out\" : \"Opponent is out\";\n  }\n\n\n  // session heading\n  sessionHeading() {\n    // don't display anythin before player join a game\n    // player turn is decide then, hence wait for it\n    if (!this._displayPlayererSessionInfo) return \"\";\n    return (this._isOut) ? \"Opponent's turn to play\" : \"Your turn to play\";\n  }\n\n\n  // component did mount\n  componentDidMount() {\n    this.socket.on(\"opponentScore\", (oppScore: string) => {\n      // console.log(oppScore);\n      this.setState({\n        opponentScore: oppScore\n      });\n    });\n\n\n    // set player codes\n    this.socket.on(\"playerCode\", (playerInitInfoMap: {playerCode: string, initSession: boolean}) => {\n      // setting player code that is given back by the server\n      // this playerCode is used to tie players and opponents together\n      this._customPlayerCode = playerInitInfoMap.playerCode;\n      // player session is whether player should play or not\n      this._isOut = playerInitInfoMap.initSession;\n      // Display session info once player is connected to a game\n      this._displayPlayererSessionInfo = true;\n      this.forceUpdate();\n    });\n\n    // open book wile opponent is animating\n    this.socket.on(\"openBookWithOpponentAngle\", (sheetInfo: any) => {\n      // console.log(\"oppening book\");\n      // rotate the sheet of .sheetInfo.sheetCoverPos class bt sheetInfo.sheetAngle angle \n      const sheetCover = document.querySelector(\".\"+sheetInfo.sheetCoverPos) as HTMLElement;\n      sheetCover.style[\"transform\"] = \"rotateY(\" + sheetInfo.sheetAngle + \"deg\" +\")\";\n    })\n\n    // player book closing animation\n    // triggered by opponent\n    this.socket.on(\"opponentBookStopOpeningAnimation\", () => {\n      // handle sheet closing animation per sheet\n      for (let sheetPos: number = 0; sheetPos < 10; sheetPos++) {\n        const sheet = new Sheet({pos:sheetPos});\n        sheet.handleEndDrag();\n      }\n    });\n\n    // Display opponent's page number while playing\n    this.socket.on(\"currentPage\", (opponentPageNumber: string) => {\n      // sheets are arranged in a book as a stack, hence page 5 appears first\n      const rightSheet = document.querySelector(\".sheet-cover5\") as HTMLElement;\n      const rightSheetPara =  rightSheet.querySelector(\".page-number\") as HTMLElement;\n      rightSheetPara.innerText = opponentPageNumber;\n\n      // page 4 is on the right side\n      const leftSheet = document.querySelector(\".sheet-cover4\") as HTMLElement;\n      const leftSheetPara =  leftSheet.querySelector(\".next-page-number\") as HTMLElement;\n      leftSheetPara.innerText = (Number(opponentPageNumber)+1).toString(); \n    });\n\n    // Switch player when opponent is out\n    // Display opponent is out message toi current player\n    this.socket.on(\"outMessage\", () => {\n      console.log(\"Outmessage\");\n        // if opponent is out,\n        // current player can start playing\n        this._isOut = false;\n        this.toggleOutWindow();\n        this.forceUpdate();\n    });\n\n  }\n\n\n  // render\n  render() {\n    return(\n      <div className=\"App\">\n        <Out finalScore={this.finalScore()} playerText={this.playerText()}/>\n        <EnterCode parentCallBack={this.codeCallBack} />\n        <Navbar parentCallback={() => {}} sessionHeading={this.sessionHeading()}/>\n        <div className=\"body-container\">\n          <div className=\"first-row\">\n            {/* If player is not out then it is player's turn */}\n            <Book appCallBack={this.bookCallBack} socket={this.socket} customPlayerCode={this.getCustomPlayerCode} playerTurn={!this._isOut} /> \n            <Score playerScore={this._totalScore} opponentScore={this.state.opponentScore}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}